Terraform, EC2 Container Service (ECS) and Docker
=================================================

This example demos how Terraform provision AWS instances, based on *"Infrastructure As Code"* principle.

Under this directory, after you run *"terraform apply"* on these Terraform configuration, a new AWS EC2 instance will be created.

Have Terraform installed. Create a file *"terraform.tfvars"* which including AWS access and secret keys (terraform.tfvars.sample file):

[source.console]
----
access_key = "This is AWS account's Access Key"
secret_key = "This is AWS account's Secret Key"
----

==== Kick off 
Run with these commands, create AWS instance, install ECS agent and start Docker container:

[source.console]
----
12:29:09 𝜆 /usr/local/terraform/terraform apply -var 'key_name=aws-key' -var 'key_path=/Users/terrence/.ssh/aws-key.pem'
aws_security_group.default: Creating...
  description:                          "" => "Security Group for Terraform"
  egress.#:                             "" => "1"
  egress.482069346.cidr_blocks.#:       "" => "1"
  egress.482069346.cidr_blocks.0:       "" => "0.0.0.0/0"
  egress.482069346.from_port:           "" => "0"
  egress.482069346.protocol:            "" => "-1"
  egress.482069346.security_groups.#:   "" => "0"
  egress.482069346.self:                "" => "0"
  egress.482069346.to_port:             "" => "0"
  ingress.#:                            "" => "3"
  ingress.2214680975.cidr_blocks.#:     "" => "1"
  ingress.2214680975.cidr_blocks.0:     "" => "0.0.0.0/0"
  ingress.2214680975.from_port:         "" => "80"
  ingress.2214680975.protocol:          "" => "tcp"
  ingress.2214680975.security_groups.#: "" => "0"
  ingress.2214680975.self:              "" => "0"
  ingress.2214680975.to_port:           "" => "80"
  ingress.2541437006.cidr_blocks.#:     "" => "1"
  ingress.2541437006.cidr_blocks.0:     "" => "0.0.0.0/0"
  ingress.2541437006.from_port:         "" => "22"
  ingress.2541437006.protocol:          "" => "tcp"
  ingress.2541437006.security_groups.#: "" => "0"
  ingress.2541437006.self:              "" => "0"
  ingress.2541437006.to_port:           "" => "22"
  ingress.2617001939.cidr_blocks.#:     "" => "1"
  ingress.2617001939.cidr_blocks.0:     "" => "0.0.0.0/0"
  ingress.2617001939.from_port:         "" => "443"
  ingress.2617001939.protocol:          "" => "tcp"
  ingress.2617001939.security_groups.#: "" => "0"
  ingress.2617001939.self:              "" => "0"
  ingress.2617001939.to_port:           "" => "443"
  name:                                 "" => "Terraform-example"
  owner_id:                             "" => "<computed>"
  vpc_id:                               "" => "<computed>"
aws_security_group.default: Creation complete
aws_instance.web: Creating...
  ami:                       "" => "ami-0c95b86f"
  availability_zone:         "" => "<computed>"
  ebs_block_device.#:        "" => "<computed>"
  ephemeral_block_device.#:  "" => "<computed>"
  instance_state:            "" => "<computed>"
  instance_type:             "" => "t2.micro"
  key_name:                  "" => "aws-key"
  placement_group:           "" => "<computed>"
  private_dns:               "" => "<computed>"
  private_ip:                "" => "<computed>"
  public_dns:                "" => "<computed>"
  public_ip:                 "" => "<computed>"
  root_block_device.#:       "" => "<computed>"
  security_groups.#:         "" => "1"
  security_groups.259444290: "" => "Terraform-example"
  source_dest_check:         "" => "1"
  subnet_id:                 "" => "<computed>"
  tags.#:                    "" => "1"
  tags.Name:                 "" => "terraform-example"
  tenancy:                   "" => "<computed>"
  vpc_security_group_ids.#:  "" => "<computed>"
aws_instance.web: Still creating... (10s elapsed)
aws_instance.web: Still creating... (20s elapsed)
aws_instance.web: Still creating... (30s elapsed)
aws_instance.web: Provisioning with 'file'...
aws_instance.web: Still creating... (40s elapsed)
aws_instance.web: Still creating... (50s elapsed)
aws_instance.web: Still creating... (1m0s elapsed)
aws_instance.web: Still creating... (1m10s elapsed)
aws_instance.web: Still creating... (1m20s elapsed)
aws_instance.web: Provisioning with 'remote-exec'...
aws_instance.web (remote-exec): Connecting to remote host via SSH...
aws_instance.web (remote-exec):   Host: 54.206.45.123
aws_instance.web (remote-exec):   User: ec2-user
aws_instance.web (remote-exec):   Password: false
aws_instance.web (remote-exec):   Private key: true
aws_instance.web (remote-exec):   SSH Agent: true
aws_instance.web (remote-exec): Connected!
aws_instance.web (remote-exec): Loaded plugins: priorities, update-motd,
aws_instance.web (remote-exec):               : upgrade-helper
aws_instance.web (remote-exec): Resolving Dependencies
aws_instance.web (remote-exec): --> Running transaction check
aws_instance.web (remote-exec): ---> Package ecs-init.x86_64 0:1.8.2-1.amzn1 will be installed
aws_instance.web (remote-exec): --> Processing Dependency: docker <= 1.9.1 for package: ecs-init-1.8.2-1.amzn1.x86_64
aws_instance.web (remote-exec): --> Processing Dependency: docker >= 1.6.0 for package: ecs-init-1.8.2-1.amzn1.x86_64
aws_instance.web (remote-exec): --> Running transaction check
aws_instance.web (remote-exec): ---> Package docker.x86_64 0:1.9.1-1.3.amzn1 will be installed
aws_instance.web (remote-exec): --> Processing Dependency: xfsprogs for package: docker-1.9.1-1.3.amzn1.x86_64
aws_instance.web (remote-exec): --> Running transaction check
aws_instance.web (remote-exec): ---> Package xfsprogs.x86_64 0:3.2.2-2.20.amzn1 will be installed
aws_instance.web (remote-exec): --> Finished Dependency Resolution

aws_instance.web (remote-exec): Dependencies Resolved

aws_instance.web (remote-exec): ========================================
aws_instance.web (remote-exec):  Package  Arch   Version
aws_instance.web (remote-exec):                      Repository    Size
aws_instance.web (remote-exec): ========================================
aws_instance.web (remote-exec): Installing:
aws_instance.web (remote-exec):  ecs-init x86_64 1.8.2-1.amzn1
aws_instance.web (remote-exec):                      amzn-updates 1.8 M
aws_instance.web (remote-exec): Installing for dependencies:
aws_instance.web (remote-exec):  docker   x86_64 1.9.1-1.3.amzn1
aws_instance.web (remote-exec):                      amzn-main    9.9 M
aws_instance.web (remote-exec):  xfsprogs x86_64 3.2.2-2.20.amzn1
aws_instance.web (remote-exec):                      amzn-main    1.7 M

aws_instance.web (remote-exec): Transaction Summary
aws_instance.web (remote-exec): ========================================
aws_instance.web (remote-exec): Install  1 Package (+2 Dependent packages)

aws_instance.web (remote-exec): Total download size: 13 M
aws_instance.web (remote-exec): Installed size: 45 M
aws_instance.web (remote-exec): Downloading packages:
aws_instance.web (remote-exec): (1/3): doc (40%) | 5.4 MB     --:-- ETA
aws_instance.web (remote-exec): (1/3): docker-1. | 9.9 MB     00:00
aws_instance.web (remote-exec): (2/3): ecs-init- | 1.8 MB     00:00
aws_instance.web (remote-exec): (3/3): xfsprogs- | 1.7 MB     00:00
aws_instance.web (remote-exec): ----------------------------------------
aws_instance.web (remote-exec): Total       15 MB/s |  13 MB  00:00
aws_instance.web (remote-exec): Running transaction check
aws_instance.web (remote-exec): Running transaction test
aws_instance.web (remote-exec): Transaction test succeeded
aws_instance.web (remote-exec): Running transaction
aws_instance.web (remote-exec):   Installing : xfsprogs [         ] 1/3
aws_instance.web (remote-exec):   Installing : xfsprogs [#        ] 1/3
aws_instance.web (remote-exec):   Installing : xfsprogs [##       ] 1/3
aws_instance.web (remote-exec):   Installing : xfsprogs [###      ] 1/3
aws_instance.web (remote-exec):   Installing : xfsprogs [####     ] 1/3
aws_instance.web (remote-exec):   Installing : xfsprogs [#####    ] 1/3
aws_instance.web (remote-exec):   Installing : xfsprogs [######   ] 1/3
aws_instance.web (remote-exec):   Installing : xfsprogs [#######  ] 1/3
aws_instance.web (remote-exec):   Installing : xfsprogs [######## ] 1/3
aws_instance.web (remote-exec):   Installing : xfsprogs-3.2.2-2.2   1/3
aws_instance.web (remote-exec):   Installing : docker-1 [         ] 2/3
aws_instance.web (remote-exec):   Installing : docker-1 [#        ] 2/3
aws_instance.web (remote-exec):   Installing : docker-1 [##       ] 2/3
aws_instance.web (remote-exec):   Installing : docker-1 [###      ] 2/3
aws_instance.web (remote-exec):   Installing : docker-1 [####     ] 2/3
aws_instance.web (remote-exec):   Installing : docker-1 [#####    ] 2/3
aws_instance.web (remote-exec):   Installing : docker-1 [######   ] 2/3
aws_instance.web (remote-exec):   Installing : docker-1 [#######  ] 2/3
aws_instance.web (remote-exec):   Installing : docker-1 [######## ] 2/3
aws_instance.web (remote-exec):   Installing : docker-1.9.1-1.3.a   2/3
aws_instance.web (remote-exec):   Installing : ecs-init [         ] 3/3
aws_instance.web (remote-exec):   Installing : ecs-init [#        ] 3/3
aws_instance.web (remote-exec):   Installing : ecs-init [##       ] 3/3
aws_instance.web (remote-exec):   Installing : ecs-init [###      ] 3/3
aws_instance.web (remote-exec):   Installing : ecs-init [####     ] 3/3
aws_instance.web (remote-exec):   Installing : ecs-init [#####    ] 3/3
aws_instance.web (remote-exec):   Installing : ecs-init [######   ] 3/3
aws_instance.web (remote-exec):   Installing : ecs-init [#######  ] 3/3
aws_instance.web (remote-exec):   Installing : ecs-init [######## ] 3/3
aws_instance.web (remote-exec):   Installing : ecs-init-1.8.2-1.a   3/3
aws_instance.web (remote-exec):   Verifying  : ecs-init-1.8.2-1.a   1/3
aws_instance.web (remote-exec):   Verifying  : xfsprogs-3.2.2-2.2   2/3
aws_instance.web (remote-exec):   Verifying  : docker-1.9.1-1.3.a   3/3

aws_instance.web (remote-exec): Installed:
aws_instance.web (remote-exec):   ecs-init.x86_64 0:1.8.2-1.amzn1

aws_instance.web (remote-exec): Dependency Installed:
aws_instance.web (remote-exec):   docker.x86_64 0:1.9.1-1.3.amzn1
aws_instance.web (remote-exec):   xfsprogs.x86_64 0:3.2.2-2.20.amzn1

aws_instance.web (remote-exec): Complete!
aws_instance.web (remote-exec): Starting cgconfig service: [  OK  ]
aws_instance.web (remote-exec): Starting docker:
aws_instance.web: Still creating... (1m30s elapsed)
aws_instance.web (remote-exec): .                          [  OK  ]
aws_instance.web: Still creating... (1m40s elapsed)
aws_instance.web: Still creating... (1m50s elapsed)
aws_instance.web (remote-exec): ecs start/running, process 2895
aws_instance.web: Creation complete
aws_elb.web: Creating...
  availability_zones.#:                   "" => "1"
  availability_zones.1436938394:          "" => "ap-southeast-2c"
  connection_draining:                    "" => "0"
  connection_draining_timeout:            "" => "300"
  dns_name:                               "" => "<computed>"
  health_check.#:                         "" => "<computed>"
  idle_timeout:                           "" => "60"
  instances.#:                            "" => "1"
  instances.885364928:                    "" => "i-fabcd178"
  internal:                               "" => "<computed>"
  listener.#:                             "" => "1"
  listener.3057123346.instance_port:      "" => "80"
  listener.3057123346.instance_protocol:  "" => "http"
  listener.3057123346.lb_port:            "" => "80"
  listener.3057123346.lb_protocol:        "" => "http"
  listener.3057123346.ssl_certificate_id: "" => ""
  name:                                   "" => "Terraform-example-elb"
  security_groups.#:                      "" => "<computed>"
  source_security_group:                  "" => "<computed>"
  source_security_group_id:               "" => "<computed>"
  subnets.#:                              "" => "<computed>"
  zone_id:                                "" => "<computed>"
aws_elb.web: Creation complete

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate

Outputs:

  ebs_address = Terraform-example-elb-1356197901.ap-southeast-2.elb.amazonaws.com
----

==== Logon AWS EC2 instance

[source.console]
----
terrence@muffler /Users/terrence/Projects/docker/terraform
10:45:57 𝜆 ssh -l ec2-user ec2-54-206-45-123.ap-southeast-2.compute.amazonaws.com
The authenticity of host 'ec2-54-206-45-123.ap-southeast-2.compute.amazonaws.com (54.206.45.123)' can't be established.
ECDSA key fingerprint is SHA256:5c3w+X1FXuhUwDQS6vTj5jdS10uwDTkoZWG3u3SQ8+I.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'ec2-54-206-45-123.ap-southeast-2.compute.amazonaws.com,54.206.45.123' (ECDSA) to the list of known hosts.
Last login: Fri May  6 00:04:53 2016 from 155.144.40.20

       __|  __|_  )
       _|  (     /   Amazon Linux AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-ami/2016.03-release-notes/

[ec2-user@ip-172-31-35-87 ~]$ ps axuw | grep ecs
root      2895  0.0  0.7  24052  7896 ?        Ssl  02:31   0:00 /usr/libexec/amazon-ecs-init start

[ec2-user@ip-172-31-35-87 ~]$ ps axuw | grep docker
root      2615  4.7  4.2 665576 43264 ?        Sl   02:30   0:33 /usr/bin/docker daemon --default-ulimit nofile=1024:4096

[ec2-user@ip-172-31-35-87 ~]$ docker info
Containers: 1
Images: 6
Server Version: 1.9.1
Storage Driver: devicemapper
 Pool Name: docker-202:1-263557-pool
 Pool Blocksize: 65.54 kB
 Base Device Size: 107.4 GB
 Backing Filesystem: xfs
 Data file: /dev/loop0
 Metadata file: /dev/loop1
 Data Space Used: 82.12 MB
 Data Space Total: 107.4 GB
 Data Space Available: 6.993 GB
 Metadata Space Used: 700.4 kB
 Metadata Space Total: 2.147 GB
 Metadata Space Available: 2.147 GB
 Udev Sync Supported: true
 Deferred Removal Enabled: false
 Deferred Deletion Enabled: false
 Deferred Deleted Device Count: 0
 Data loop file: /var/lib/docker/devicemapper/devicemapper/data
 Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata
 Library Version: 1.02.93-RHEL7 (2015-01-28)
Execution Driver: native-0.2
Logging Driver: json-file
Kernel Version: 4.4.8-20.46.amzn1.x86_64
Operating System: Amazon Linux AMI 2016.03
CPUs: 1
Total Memory: 995.4 MiB
Name: ip-172-31-42-22
ID: G72R:RJFU:HTBC:PXDN:PMPC:XFYZ:SHIR:Z7AJ:6GHS:G6AP:47HM:WI5P
----

==== Deploy first Dockerised application

[source.console]
----
[ec2-user@ip-172-31-35-87 ~]$ docker run -d -p 80:5000 training/webapp:latest python app.py

[ec2-user@ip-172-31-35-87 ~]$ curl http://localhost
Hello world!
----

==== Testing in browser

Get AWS instance public URL, e.g., ec2-54-206-43-82.ap-southeast-2.compute.amazonaws.com. Go to:

http://ec2-54-206-43-82.ap-southeast-2.compute.amazonaws.com

=== Change provision plan

[source.console]
----
terrence@muffler /Users/terrence/Projects/docker/terraform
20:34:38 𝜆 terraform plan -var 'key_name=aws-key' -var 'key_path=/Users/terrence/.ssh/aws-key.pem'
Refreshing Terraform state prior to plan...

aws_security_group.default: Refreshing state... (ID: sg-443f9f20)
aws_instance.web: Refreshing state... (ID: i-bb253864)
aws_elb.web: Refreshing state... (ID: Terraform-example-elb)

The Terraform execution plan has been generated and is shown below.
Resources are shown in alphabetical order for quick scanning. Green resources
will be created (or destroyed and then created if an existing resource
exists), yellow resources are being changed in-place, and red resources
will be destroyed.

Note: You didn't specify an "-out" parameter to save this plan, so when
"apply" is called, Terraform can't guarantee this is what will execute.

~ aws_instance.web
    tags.#:    "0" => "1"
    tags.Name: "" => "terraform-example"


Plan: 0 to add, 1 to change, 0 to destroy.

terrence@muffler /Users/terrence/Projects/docker/terraform
11:37:45 𝜆 terraform apply -var 'key_name=aws-key' -var 'key_path=/Users/terrence/.ssh/aws-key.pem'
aws_security_group.default: Refreshing state... (ID: sg-443f9f20)
aws_instance.web: Refreshing state... (ID: i-bb253864)
aws_elb.web: Refreshing state... (ID: Terraform-example-elb)
aws_instance.web: Modifying...
  tags.#:    "0" => "1"
  tags.Name: "" => "terraform-example"
aws_instance.web: Modifications complete

Apply complete! Resources: 0 added, 1 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate

Outputs:

  ebs_address = Terraform-example-elb-297157247.ap-southeast-2.elb.amazonaws.com
----

==== Destroy Terraform resource

[source.console]
----
terrence@muffler /Users/terrence/Projects/docker/terraform
11:42:29 𝜆 terraform destroy -var 'key_name=aws-key' -var 'key_path=/Users/terrence/.ssh/aws-key.pem'
Do you really want to destroy?
  Terraform will delete all your managed infrastructure.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_security_group.default: Refreshing state... (ID: sg-443f9f20)
aws_instance.web: Refreshing state... (ID: i-bb253864)
aws_elb.web: Refreshing state... (ID: Terraform-example-elb)
aws_elb.web: Destroying...
aws_elb.web: Destruction complete
aws_instance.web: Destroying...
aws_instance.web: Still destroying... (10s elapsed)
aws_instance.web: Still destroying... (20s elapsed)
aws_instance.web: Still destroying... (30s elapsed)
aws_instance.web: Destruction complete
aws_security_group.default: Destroying...
aws_security_group.default: Destruction complete

Apply complete! Resources: 0 added, 0 changed, 3 destroyed.
----


References
----------
- Terraform getting started, https://www.terraform.io/intro/getting-started/install.html
- Running Docker on AWS from the ground up, http://www.ybrikman.com/writing/2015/11/11/running-docker-aws-ground-up/
- Installing the Amazon ECS Container Agent, http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-install.html
- Guide to automating a multi-tiered application securely on AWS with Docker and Terraform, https://www.airpair.com/aws/posts/ntiered-aws-docker-terraform-guide
- Infrastructure as code with Terraform and docker, http://www.juancarlosgpelaez.com/terraform-aws-wso2-esb-docker-sample/
- Rebuilding Our Infrastructure with Docker, ECS, and Terraform, https://segment.com/blog/rebuilding-our-infrastructure/


Copying
-------
Copyright © 2016 - Terrence Miao. Free use of this software is granted under the terms of the GNU General Public License version 3 (GPLv3).
